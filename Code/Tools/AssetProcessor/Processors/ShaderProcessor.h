// Copyright (c) 2023-present Sparky Studios. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#include <AssetProcessor/Importers/ShaderImporter.h>
#include <AssetProcessor/Processors/Processor.h>

struct spShaderProcessorConfig
{
  /// \brief The list of shader variants to build is the same shader asset.
  /// This setting is only used when building a single shader asset.
    ezList<ezStringView> m_ShaderVariants;
};

/// \brief Shader files processor.
///
/// This processor is responsible for loading and processing binary shader files
/// generated by the SPSL compiler.
class spShaderProcessor final : public spProcessor<spShaderProcessorConfig>
{
  // spProcessor

public:
  ezResult Process(ezStringView sFileName, ezStringView sOutputPath) override;

  // spShaderProcessor

public:
  explicit spShaderProcessor(const spShaderProcessorConfig& config);
  ~spShaderProcessor() override = default;

private:
  spShaderImporter m_ShaderImporter;
};
