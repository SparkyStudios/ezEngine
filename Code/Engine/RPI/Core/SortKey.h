// Copyright (c) 2023-present Sparky Studios. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#include <RPI/RPIDLL.h>

namespace RPI
{
  /// \brief A struct to hold the sort key for a \see spRenderObject.
  ///
  /// The sort key is used to sort the render data in a \see spRenderingStage.
  /// Sort keys are generated by a \see spSortMode implementation.
  struct spSortKey
  {
    ezUInt64 m_uiValue{0};
    ezUInt32 m_uiIndex{0};
    ezUInt32 m_uiStableIndex{0};

    EZ_ALWAYS_INLINE bool operator<(const spSortKey& rhs) const
    {
      return m_uiValue == rhs.m_uiValue ? m_uiStableIndex < rhs.m_uiStableIndex : m_uiValue < rhs.m_uiValue;
    }

    EZ_ALWAYS_INLINE bool operator==(const spSortKey& rhs) const
    {
      return m_uiValue == rhs.m_uiValue && m_uiStableIndex == rhs.m_uiStableIndex;
    }

    EZ_ALWAYS_INLINE bool operator!=(const spSortKey& rhs) const
    {
      return !(*this == rhs);
    }

    EZ_ALWAYS_INLINE bool operator<=(const spSortKey& rhs) const
    {
      return !(*this > rhs);
    }

    EZ_ALWAYS_INLINE bool operator>=(const spSortKey& rhs) const
    {
      return !(*this < rhs);
    }

    EZ_ALWAYS_INLINE bool operator>(const spSortKey& rhs) const
    {
      return m_uiValue == rhs.m_uiValue ? m_uiStableIndex > rhs.m_uiStableIndex : m_uiValue > rhs.m_uiValue;
    }
  };
} // namespace RPI