[PLATFORMS]
ALL


[COMPUTESHADER]

#include <Shaders/Common/Utils.h>

#include "ChromaticAberrationConstants.h"

Texture2D ColorTexture;
Texture2D OffsetTexture;

RWTexture2D<float4> Output;

[numthreads(THREAD_GROUP_COUNT_X, THREAD_GROUP_COUNT_Y, 1)]
void main(uint3 threadId : SV_DispatchThreadID)
{
  // Out of bounds check
  if (any(int2(threadId.xy) >= ViewportSize.xy))
    return;

  const float2 uv    = (threadId.xy + 0.5f) * TexelSize;
  float camera_error = Strength / Aperture;
  float intensity    = camera_error * OffsetTexture.SampleLevel(LinearClampSampler, uv, 0).r * 100.0f;
  float2 shift       = float2(intensity, -intensity);

  // Lens effect
  shift.x *= abs(uv.x * 2.0f - 1.0f);
  shift.y *= abs(uv.y * 2.0f - 1.0f);

  // Sample color
  float3 color = 0.0f;
  color.r      = ColorTexture.SampleLevel(LinearClampSampler, uv + (TexelSize * shift), 0).r;
  color.g      = ColorTexture[threadId.xy].g;
  color.b      = ColorTexture.SampleLevel(LinearClampSampler, uv - (TexelSize * shift), 0).b;

  Output[threadId.xy] = float4(color, ColorTexture[threadId.xy].a);
}
